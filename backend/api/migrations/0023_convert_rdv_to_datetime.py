# Generated by Django 5.2.4 on 2025-08-19 20:08

from django.db import migrations, models
from datetime import datetime, date
from django.utils import timezone


def convert_time_to_datetime(apps, schema_editor):
    """
    Convert TimeField values to DateTimeField by combining with event's start_date
    """
    Participation = apps.get_model('api', 'Participation')
    Event = apps.get_model('api', 'Event')
    
    # Get all participations that have rdv values
    participations_with_rdv = Participation.objects.filter(rdv__isnull=False)
    
    for participation in participations_with_rdv:
        try:
            # Get the event's start_date to use as base date
            event = participation.event_id
            if event and event.start_date:
                base_date = event.start_date.date()
            else:
                # Fallback to today's date if no event date available
                base_date = timezone.now().date()
            
            # The rdv field currently contains time data
            rdv_time = participation.rdv
            
            if rdv_time:
                # Create a datetime by combining the base date with the time
                new_datetime = datetime.combine(base_date, rdv_time)
                
                # Make it timezone aware
                new_datetime = timezone.make_aware(new_datetime)
                
                # Update the temporary field using raw SQL to avoid field type conflicts
                schema_editor.execute(
                    "UPDATE api_participation SET rdv_temp = %s WHERE id = %s",
                    [new_datetime, participation.id]
                )
                
        except Exception as e:
            print(f"Error converting participation {participation.id}: {e}")
            continue


def reverse_conversion(apps, schema_editor):
    """
    Reverse the conversion by extracting time from datetime
    """
    Participation = apps.get_model('api', 'Participation')
    
    participations = Participation.objects.filter(rdv_temp__isnull=False)
    
    for participation in participations:
        try:
            if participation.rdv_temp:
                # Extract just the time part
                time_value = participation.rdv_temp.time()
                
                # Update using raw SQL
                schema_editor.execute(
                    "UPDATE api_participation SET rdv = %s WHERE id = %s",
                    [time_value, participation.id]
                )
        except Exception as e:
            print(f"Error reversing participation {participation.id}: {e}")
            continue


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0022_talent_etablissement_talent_filiere'),
    ]

    operations = [
        # Step 1: Add a temporary datetime field
        migrations.AddField(
            model_name='participation',
            name='rdv_temp',
            field=models.DateTimeField(blank=True, null=True),
        ),
        
        # Step 2: Convert existing time data to datetime in temp field
        migrations.RunPython(
            convert_time_to_datetime,
            reverse_conversion,
        ),
        
        # Step 3: Remove the old time field
        migrations.RemoveField(
            model_name='participation',
            name='rdv',
        ),
        
        # Step 4: Rename the temp field to rdv
        migrations.RenameField(
            model_name='participation',
            old_name='rdv_temp',
            new_name='rdv',
        ),
    ]
